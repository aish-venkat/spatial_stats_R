str(worldmap@data)
subset(worldmap@data, worldmap@data$year==2015)
test<-subset(worldmap@data, worldmap@data$year==2015)
str(test)
test<-subset(worldmap, worldmap@data$year==2015)
str(test)
str(test$year)
ElecMap_2015<- subset(worldmap, worldmap@data$year==2015)
plot(ElecMap_2015, col=EG.ELC.ACCS.ZS)
plot(ElecMap_2015, col=ElecMap_2015$EG.ELC.ACCS.ZS)
brks <- quantile(ElecMap_2015@data$EG.ELC.ACCS.ZS, seq(0,1,1/7))
brks <- quantile(ElecMap_2015@data$EG.ELC.ACCS.ZS, seq(0,1,1/7), na.rm=T)
brks <- quantile(ElecMap_2015@data$EG.ELC.ACCS.ZS, seq(0,1,1/7), na.rm=T)
cols <- grey((length(brks):2)/length(brks))
dens <- (2:length(brks))*3
plot(ElecMap_2015, col=cols[findInterval(ElecMap_2015@data$EG.ELC.ACCS.ZS, brks, all.inside=TRUE)])
brks <- quantile(ElecMap_2015@data$EG.ELC.ACCS.ZS, seq(0,1,1/7), na.rm=T)
cols <- grey((length(brks):2)/length(brks))
dens <- (2:length(brks))*3
plot(ElecMap_2015, col=cols[findInterval(ElecMap_2015@data$EG.ELC.ACCS.ZS, brks, all.inside=TRUE, na.rm=T)])
plot(ElecMap_2015, col=cols[findInterval(ElecMap_2015@data$EG.ELC.ACCS.ZS, brks, all.inside=TRUE)])
ElecMap_2015@data$EG.ELC.ACCS.ZS
worldmap=readOGR(dsn= getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
# Now you have a Spdf object (spatial polygon data frame). You can start doing maps !
# Print your shapefile
plot(worldmap)
names(worldmap)
# Merge WDI data with this world map
worldmap@data<-data.frame(worldmap@data, dat[match(worldmap@data[,"ISO2"], dat[,"iso2c"]),])
ElecMap_2015<- subset(worldmap, worldmap@data$year==2015)
ElecMap_2015@data$EG.ELC.ACCS.ZS
ElecMap_2014<- subset(worldmap, worldmap@data$year==2014)
brks <- quantile(ElecMap_2015@data$EG.ELC.ACCS.ZS, seq(0,1,1/7), na.rm=T)
cols <- grey((length(brks):2)/length(brks))
dens <- (2:length(brks))*3
brks <- quantile(ElecMap_2014@data$EG.ELC.ACCS.ZS, seq(0,1,1/7), na.rm=T)
cols <- grey((length(brks):2)/length(brks))
dens <- (2:length(brks))*3
brks
worldmap@data<-data.frame(worldmap@data, dat[match(worldmap@data[,"ISO2"], dat[,"iso2c"]),])
worldmap=readOGR(dsn= getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
# Now you have a Spdf object (spatial polygon data frame). You can start doing maps !
# Print your shapefile
plot(worldmap)
names(worldmap)
# Merge WDI data with this world map
worldmap@data<-data.frame(worldmap@data, dat[match(worldmap@data[,"ISO2"], dat[,"iso2c"]),])
library(WDI)
WDIsearch('electricity')
dat=WDI("EG.ELC.ACCS.ZS", country=all, start=2015, end=2015)
str(dat)
# Download the shapefile of world countries borders. Found on http://thematicmapping.org/downloads/world_borders.php
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="world_shape_file.zip")
# Unzip this file.
unzip("world_shape_file.zip")
# Read this shape file with the rgdal library.
library(rgdal)
worldmap=readOGR(dsn= getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
# Now you have a Spdf object (spatial polygon data frame). You can start doing maps !
# Print your shapefile
plot(worldmap)
names(worldmap)
# Merge WDI data with this world map
worldmap@data<-data.frame(worldmap@data, dat[match(worldmap@data[,"ISO2"], dat[,"iso2c"]),])
str(worldmap)
unique(worldmap@data$EG.ELC.ACCS.ZS)
worldmap@data<-data.frame(merge(worldmap@data, dat$EG.ELC.ACCS.ZS, by.x="ISO2", by.y="iso2c", all=F))
names(worldmap@data)
names(dat)
worldmap@data<-merge(worldmap@data, dat, by.x="ISO2", by.y="iso2c", all=F))
worldmap@data<-merge(worldmap@data, dat, by.x="ISO2", by.y="iso2c", all=F)
unique(worldmap@data$year.y)
library(WDI)
WDIsearch('electricity')
dat=WDI("EG.ELC.ACCS.ZS", country=all, start=2015, end=2015)
str(dat)
# Download the shapefile of world countries borders. Found on http://thematicmapping.org/downloads/world_borders.php
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="world_shape_file.zip")
# Unzip this file.
unzip("world_shape_file.zip")
# Read this shape file with the rgdal library.
library(rgdal)
worldmap=readOGR(dsn= getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
# Now you have a Spdf object (spatial polygon data frame). You can start doing maps !
# Print your shapefile
plot(worldmap)
names(worldmap)
# Merge WDI data with this world map
worldmap@data<-merge(worldmap@data, dat, by.x="ISO2", by.y="iso2c", all=F)
unique(worldmap@data$year)
library(WDI)
WDIsearch('electricity')
dat=WDI("EG.ELC.ACCS.ZS", country=all, start=1980, end=2015)
str(dat)
unique(dat$year)
dat_2015<-subset(dat, year==2015)
unique(dat_2015$year)
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="world_shape_file.zip")
# Unzip this file.
unzip("world_shape_file.zip")
# Read this shape file with the rgdal library.
library(rgdal)
worldmap=readOGR(dsn= getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
# Now you have a Spdf object (spatial polygon data frame). You can start doing maps !
# Print your shapefile
plot(worldmap)
names(worldmap)
worldmap@data<-merge(worldmap@data, dat_2015, by.x="ISO2", by.y="iso2c", all=F)
unique(worldmap$\)
\
unique(worldmap$year)
summary(worldmap@data$EG.ELC.ACCS.ZS)
summary(dat_2015$EG.ELC.ACCS.ZS)
WDIsearch('electricity')
dat=WDI("EG.ELC.ACCS.ZS", country=all)
dat=WDI("EG.ELC.ACCS.ZS", country=all, start=2015, end=2015)
library(WDI)
dat=WDI("EG.ELC.ACCS.ZS", country=all, start=2015, end=2015)
library(WDI)
WDIsearch('electricity')
WDIsearch('water')
library(WDI)
WDIsearch('water')
dat=WDI("SH.H2O.SAFE.RU.ZS", country=all, start=2015, end=2015)
str(dat)
dat=WDI("SH.H2O.SAFE.RU.ZS", country="all", start=2015, end=2015)
str(dat)
library(WDI)
WDIsearch('water')
dat=WDI("EG.ELC.ACCS.ZS", country="all", start=2015, end=2015)
str(dat)
WDIsearch('GINI')
dat=WDI("SI.POV.GINI", country="all", start=2015, end=2015)
str(dat)
library(WDI)
WDIsearch('GINI')
dat=WDI("SI.POV.GINI", country="all", start=2014, end=2014)
str(dat)
WDIsearch('gini')
WDIsearch('gini index')
WDIsearch('poverty')
dat=WDI("SI.POV.GAP2", country="all", start=2014, end=2014)
str(dat)
?WDIsearch
?WDI
WDIsearch('gdp')
dat=WDI("NY.GDP.PCAP.CD", country="all", start=2014, end=2014)
str(dat)
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="world_shape_file.zip")
# Unzip this file.
unzip("world_shape_file.zip")
# Read this shape file with the rgdal library.
library(rgdal)
worldmap=readOGR(dsn= getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
# Now you have a Spdf object (spatial polygon data frame). You can start doing maps !
# Print your shapefile
plot(worldmap)
names(worldmap)
worldmap@data<-merge(worldmap@data, dat_2015, by.x="ISO2", by.y="iso2c", all=F)
worldmap@data<-merge(worldmap@data, dat, by.x="ISO2", by.y="iso2c", all=F)
?seq
?quantile(worldmap@data$NY.GDP.PCAP.CD)
quantile(worldmap@data$NY.GDP.PCAP.CD)
quantile(worldmap@data$NY.GDP.PCAP.CD, na.rm=F)
quantile(worldmap@data$NY.GDP.PCAP.CD, na.rm=T)
?cut
brks <- cut(worldmap@data$NY.GDP.PCAP.CD, breaks=7, na.rm=T)
brks
worldmap@data$NY.GDP.PCAP.CD
as.vector(worldmap@data$NY.GDP.PCAP.CD)
brks <- cut(as.vector(worldmap@data$NY.GDP.PCAP.CD), breaks=7, na.rm=T)
str(worldmap@data$NY.GDP.PCAP.CD)
str(brks)
brks <- as.vector(cut(as.vector(worldmap@data$NY.GDP.PCAP.CD), breaks=7, na.rm=T))
brks
str(breaks)
str(brks)
brks <- as.vector(levels(cut(worldmap@data$NY.GDP.PCAP.CD), breaks=7, na.rm=T))
brks <- as.numeric(levels(cut(worldmap@data$NY.GDP.PCAP.CD), breaks=7, na.rm=T))
brks <- as.numeric(levels(cut(worldmap@data$NY.GDP.PCAP.CD, breaks=7, na.rm=T))
)
brks
cut(worldmap@data$NY.GDP.PCAP.CD, breaks=7, na.rm=T)
levels(cut(worldmap@data$NY.GDP.PCAP.CD, breaks=7, na.rm=T))
brks <- levels(cut(worldmap@data$NY.GDP.PCAP.CD, breaks=7, na.rm=T)
)
brks
cols <- grey((length(brks):2)/length(brks))
dens <- (2:length(brks))*3
plot(worldmap, col=cols[findInterval(worldmap@data$NY.GDP.PCAP.CD, brks, all.inside=TRUE)])
summary(dat)
?complete.cases
dat_all<-dat[complete.cases(dat),]
summary(dat_all)
worldmap@data<-merge(worldmap@data, dat_all, by.x="ISO2", by.y="iso2c", all=F)
brks <- levels(cut(worldmap@data$NY.GDP.PCAP.CD, breaks=7, na.rm=T))
cols <- grey((length(brks):2)/length(brks))
dens <- (2:length(brks))*3
plot(worldmap, col=cols[findInterval(worldmap@data$NY.GDP.PCAP.CD, brks, all.inside=TRUE)])
brks <- levels(cut(as.vector(worldmap@data$NY.GDP.PCAP.CD), breaks=7, na.rm=T))
brks <- levels(cut(as.numeric(worldmap@data$NY.GDP.PCAP.CD), breaks=7, na.rm=T))
brks
worldmap@data$NY.GDP.PCAP.CD
worldmap
str(worldmap@data)
library(WDI)
WDIsearch('gdp')
dat=WDI("NY.GDP.PCAP.CD", country="all", start=2014, end=2014)
str(dat)
dat_all<-dat[complete.cases(dat),]
#dat_2015<-subset(dat, year==2015)
# Download the shapefile of world countries borders. Found on http://thematicmapping.org/downloads/world_borders.php
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="world_shape_file.zip")
# Unzip this file.
unzip("world_shape_file.zip")
# Read this shape file with the rgdal library.
library(rgdal)
worldmap=readOGR(dsn= getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
# Now you have a Spdf object (spatial polygon data frame). You can start doing maps !
# Print your shapefile
plot(worldmap)
names(worldmap)
# Merge WDI data with this world map
worldmap@data<-merge(worldmap@data, dat_all, by.x="ISO2", by.y="iso2c", all=F)
str(worldmap@data$NY.GDP.PCAP.CD)
brks <- levels(cut(as.numeric(worldmap@data$NY.GDP.PCAP.CD), breaks=7, na.rm=T))
cols <- grey((length(brks):2)/length(brks))
dens <- (2:length(brks))*3
plot(worldmap, col=cols[findInterval(worldmap@data$NY.GDP.PCAP.CD, brks, all.inside=TRUE)])
plot(worldmap, col=cols[findInterval(worldmap@data$NY.GDP.PCAP.CD, brks, na.rm=T)])
plot(worldmap, col=cols[findInterval(worldmap@data$NY.GDP.PCAP.CD, brks, na.omit=T)])
?plot
plot(worldmap)
?brewer.pals
library(RColorBrewer)
summary(worldmap@data)
?brewer.pal
breaks = cut(as.numeric(worldmap@data$NY.GDP.PCAP.CD), breaks=7, na.rm=T)
breaks
worldmap@data$NY.GDP.PCAP.CD
breaks = cut(worldmap@data$NY.GDP.PCAP.CD, breaks=6, na.rm=T)
breaks
breaks = levels(cut(worldmap@data$NY.GDP.PCAP.CD, breaks=6, na.rm=T))
breaks
worldmap@data$NY.GDP.PCAP.CD
breaks = levels(cut(as.numeric(worldmap@data$NY.GDP.PCAP.CD), breaks=6, na.rm=T))
breaks
?cut
str(worldmap@data$NY.GDP.PCAP.CD)
breaks = cut(worldmap@data$NY.GDP.PCAP.CD, breaks=6))
breaks = cut(worldmap@data$NY.GDP.PCAP.CD, breaks=6)
breaks
worldmap@data$NY.GDP.PCAP.CD
cols <- brewer.pal(n = 4, name = "Accent")
lcols <- cut(worldmap@data$NY.GDP.PCAP.CD,
breaks = quantile(worldmap@data$NY.GDP.PCAP.CD),
labels = cols)
plot(worldmap, col = as.character(lcols))
cols <- brewer.pal(n = 4, name = "BuGn")
lcols <- cut(worldmap@data$NY.GDP.PCAP.CD,
breaks = quantile(worldmap@data$NY.GDP.PCAP.CD),
labels = cols)
plot(worldmap, col = as.character(lcols))
WDIsearch('gdp')
plot(worldmap, col = as.character(lcols),
main="GDP per capita (current US$)")
ggplot(worldmap)+geom_polygon()
worldmap@polygons
wmap_df <- fortify(worldmap)
str(wmap_df)
source('H:/Open Data in R workshop code.R', echo=TRUE)
wmap_df <- fortify(worldmap)
ggplot(wmap_df) +
geom_polygon(aes(long, lat))
ggplot(wmap_df) +
geom_polygon(aes(long, lat)) +
coord_equal()
ggplot(wmap_df) +
geom_polygon(aes(long, lat)) +
coord_equal() +
theme_opts
wmap_df <- fortify(worldmap)
ggplot(wmap_df) +
geom_polygon(aes(long, lat)) +
coord_equal() +
theme_opts
wmap_df <- fortify(worldmap)
ggplot(wmap_df) +
geom_polygon(aes(long, lat)) +
coord_equal()
str(wmap_df)
ggplot(wmap_df) +
geom_polygon(aes(long, lat, group=group)) +
coord_equal()
wmap_df@data$id <- rownames(wmap_df@data)
worldmap@data$id <- rownames(worldmap@data)
wmap_df <- fortify(worldmap)
ggplot(wmap_df) +
geom_polygon(aes(long, lat, group=group)) +
coord_equal()
WDIsearch('water', cache=new_cache)
water = WDI(indicator='SH.H2O.SAFE.ZS', country="all", start=2000, end=2014)
water <- subset(water, !is.na(water$SH.H2O.SAFE.ZS))
water <- group_by(water, country)
water <- filter(water, year == max(year))
names(water)[1] <- "iso_a2"
final <- left_join(wmap_df, water, by="iso_a2")
library(dplyr)
water <- filter(water, year == max(year))
names(water)[1] <- "iso_a2"
final <- left_join(wmap_df, water, by="iso_a2")
str(water)
str(wmap_df)
str(worldmap)
str(worldmap@data)
str(wmap_df)
test<-merge(wmap_df, worldmap@data, by="id", all=F)
str(test)
wmap_df <- fortify(worldmap)
wmap_df<-merge(wmap_df, worldmap@data, by="id", all=F)
ggplot(wmap_df) +
geom_polygon(aes(long, lat, group=group)) +
coord_equal()
library(slidify)
library(slidifyLibraries)
xc = round(runif(10), 2)
xc
yc = round(runif(10), 2)
yc
xy = data.frame(xc, yc)
xy
xy.sp = SpatialPoints(xy)
library(c("choroplethr", "choroplethrMaps", "acs", "WDI", "sp"))
?library
require(c("choroplethr", "choroplethrMaps", "acs", "WDI", "sp"))
packages<-c("choroplethr", "choroplethrMaps", "acs", "WDI")
lapply(packages, install.packages, character.only=TRUE)
install.packages("WDI")
library(acs)
install.packages(packages)
install.packages(packages)
?SpatialPoints
library(sp)
?SpatialPoints
SpatialPoints(xy)
xy.sp = SpatialPoints(xy)
plot(xy.sp, pch = 2)
library(sp)
xy.sp
download.file("http://bit.ly/TDL_WorldBorders" , destfile="world_shape_file.zip")
unzip("world_shape_file.zip")
world_shape_file
test<-download.file("http://bit.ly/TDL_WorldBorders" , destfile="world_shape_file.zip")
str(test)
test
worldmap
require(sp)
require(rgdal)
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="world.zip")
unzip("world.zip")
worldmap=readOGR(dsn= getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
worldmap
str(worldmap)
worldmap
plot(worldmap)
projection(worldmap)
CRS(worldmap)
worldmap@polygons
worldmap@proj4string
worldmap@data
str(worldmap@data)
str(worldmap)
head(worldmap@data)
plot(worldmap, "POP2005")
spplot(worldmap, "POP2005")
>spplot
?spplot
spplot(worldmap, "POP2005", pretty=TRUE)
spplot(worldmap, "POP2005", pretty=TRUE, scale.shrink = 1)
spplot(worldmap, "POP2005", pretty=TRUE, axis.position=1, scale.shrink = 1)
spplot(worldmap, "POP2005", pretty=TRUE, axis.pos=1, scale.shrink = 1)
spplot(worldmap, "POP2005", pretty=TRUE, scale.shrink = 1)
spplot(worldmap, "POP2005", pretty=TRUE, scale.shrink = 3)
spplot(worldmap, "POP2005", pretty=TRUE, scale.shrink = 0.5)
spplot(worldmap, "POP2005", pretty=TRUE, zlim = c(0,1)))
spplot(worldmap, "POP2005", pretty=TRUE, zlim = c(0,1))
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip", destfile="world.zip"); unzip("world.zip"); worldmap=readOGR(dsn= getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
ggplot(worldmap, aes(x = long, y = lat, group = group)) + geom_path()+ coord_fixed(ratio = 1)
library(ggplot2)
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip", destfile="world.zip"); unzip("world.zip"); worldmap=readOGR(dsn= getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
ggplot(worldmap, aes(x = long, y = lat, group = group)) + geom_path()+ coord_fixed(ratio = 1)
?coord_fixed
?Theme
?theme
?theme_gray
?theme_set
?theme
?coord_equal
?theme
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip",
destfile="world.zip"); unzip("world.zip");
worldmap=readOGR(dsn= getwd(), layer="TM_WORLD_BORDERS_SIMPL-0.3")
ggplot(worldmap, aes(x = long, y = lat, group = group)) + geom_path()+ theme(aspect.ratio=0.8, panel.margin = unit(0, "lines"))
?unit
ggplot(worldmap, aes(x = long, y = lat, group = group)) + geom_path()+ theme(aspect.ratio=0.75, plot.margin = unit(0, "cm"))
ggplot(worldmap, aes(x = long, y = lat, group = group)) + geom_path()+ theme(aspect.ratio=0.75, plot.margin = unitggplot(worldmap, aes(x = long, y = lat, group = group)) + geom_path()+ theme(aspect.ratio=0.5, plot.margin = unit(c(4, 4, 4, 4), "cm"), set_panel_size(p, width=unit(7, "in")))(0, "cm"))
ggplot(worldmap, aes(x = long, y = lat, group = group)) + geom_path()+ theme(aspect.ratio=0.5, plot.margin = unit(c(4, 4, 4, 4), "cm"), set_panel_size(p, width=unit(7, "in")))
?set_panel_size
library(ggExtra)
install.packages(ggExtra)
install.packages("ggExtra")
library(ggExtra)
worldmap_df<-fortify(worldmap)
str(worldmap_df)
worldmap_df<-fortify(worldmap, region = POP2005)
worldmap_df<-fortify(worldmap, region = "POP2005")
library(rgeos)
worldmap_df<-fortify(worldmap, region = "POP2005")
rgeos
?fortify
library(ggplot2)
worldmap_df<-fortify(worldmap, region = "POP2005")
library(maptools)
worldmap_df<-fortify(worldmap, region = "POP2005")
str(worldmap_df)
worldmap_df<-fortify(worldmap@data, region = "POP2005")
str(worldmap_df)
worldmap_df<-fortify(worldmap, region = worldmap@data$POP2005)
worldmap@data$id=rownames(worldmap@data)
worldmap@data$id=rownames(worldmap@data)
worldmap_points<-fortify(worldmap, region="id")
worldmap_df<-join(worldmap_points, worldmap@data, by="id")
?join
library(plyr)
worldmap@data$id=rownames(worldmap@data)
worldmap_points<-fortify(worldmap, region="id")
worldmap_df<-join(worldmap_points, worldmap@data, by="id")
?scale_fill_brewer
ggplot(worldmap_df)+aes(long, lat, group=group, fill=POP2005) = geom_polygon()+scale_fill_brewer()
ggplot(worldmap_df)+aes(long, lat, group=group, fill=POP2005) = geom_polygon()+scale_fill_brewer()
ggplot(worldmap_df)+aes(long, lat, group=group, fill=POP2005)+geom_polygon()+scale_fill_brewer()
ggplot(worldmap_df)+aes(long, lat, group=group, fill=POP2005)+geom_polygon()+scale_fill_brewer()
ggplot(worldmap_df)+aes(long, lat, group=group, fill=POP2005)+geom_polygon()
?scale_fill_continuous
pal<-scale_fill_brewer(type="seq", palette="Oranges")
ggplot(worldmap_df)+aes(long, lat, group=group, fill=POP2005)+geom_polygon() +  pal
pal<-scale_fill_brewer(type="seq", palette="Oranges", guide="colourbar")
ggplot(worldmap_df)+aes(long, lat, group=group, fill=POP2005)+geom_polygon() +  pal
ggplot(worldmap_df)+aes(long, lat, group=group, fill=POP2005)+geom_polygon()
my.palette <- brewer.pal(n = 7, name = "OrRd")
library(RColorBrewer);
my.palette <- brewer.pal(n = 7, name = "OrRd")
ggplot(worldmap_df)+aes(long, lat, group=group, fill=POP2005)+geom_polygon()+scale_fill_discrete(my.palette)
?scale_fill_discrete
ggplot(worldmap_df)+aes(long, lat, group=group, fill=POP2005)+geom_polygon(fill=POP2005)+scale_fill_discrete(my.palette)
ggplot(worldmap_df, aes(long, lat, group=group, fill=POP2005)+
geom_polygon(aes(fill=POP2005))+scale_fill_discrete(my.palette)
ggplot(worldmap_df, aes(long, lat, group=group, fill=POP2005))+
geom_polygon(aes(fill=POP2005))+scale_fill_discrete(my.palette)
ggplot(worldmap_df, aes(long, lat, group=group, fill=POP2005))+
geom_polygon(aes(fill=POP2005))+scale_fill_continuous(my.palette)
?scale_fill_gradient
ggplot(worldmap_df, aes(long, lat, group=group, fill=POP2005))+
geom_polygon(aes(fill=POP2005))+scale_colour_gradient2()
ggplot(worldmap_df, aes(long, lat, group=group, fill=POP2005))+
geom_polygon(aes(fill=POP2005))+scale_colour_gradient2()
ggplot(worldmap_df, aes(long, lat, group=group, fill=POP2005))+
geom_polygon(aes(fill=POP2005))+scale_fill_continuous(low="yellow", high="red")
ggplot(worldmap_df, aes(long, lat, group=group, fill=POP2005))+
geom_polygon(aes(fill=POP2005))+scale_fill_continuous(low="orange", high="red")
ggplot(worldmap_df, aes(long, lat, group=group, fill=POP2005))+
geom_polygon(aes(fill=POP2005))+scale_fill_continuous(low="white", high="red")
ggplot(worldmap_df, aes(long, lat, group=group, fill=POP2005))+
geom_polygon(aes(fill=POP2005))+scale_fill_continuous(low="grey", high="red")
ggplot(worldmap_df, aes(long, lat, group=group, fill=POP2005))+
geom_polygon()+scale_fill_continuous(low="grey", high="red")
?theme
?coord_fixed
?coord_equal
?coord_map
?coord_equal
ggplot(worldmap_df, aes(long, lat, group=group, fill=POP2005))+geom_polygon()+
scale_fill_continuous(low="grey", high="red") + coord_quickmap()
?plot.margin
?theme
my.palette <- brewer.pal(n = 7, name = "OrRd")
spplot(worldmap, "POP2005", col.regions = my.palette, cuts = 6, col = "transparent")
?spplot
spplot(worldmap, "POP2005", col.regions = my.palette, cuts = 6, col = "transparent", asp=1)
spplot(worldmap, "POP2005", col.regions = my.palette, cuts = 4, col = "transparent", aspect=0.75, pretty=TRUE)
?pretty
?par.settings
?par.settings
?spplot
?trellis.par.set
spplot(worldmap, "POP2005", col.regions = my.palette, cuts = 4, col = "transparent", aspect=0.75,  border=NA, ann=FALSE, axes = FALSE)
spplot(worldmap, "POP2005", col.regions = my.palette, cuts = 4, col = "transparent", aspect=0.6,  border=NA, ann=FALSE, axes = FALSE)
spplot(worldmap, "POP2005", col.regions = my.palette, cuts = 4, col = "transparent",
aspect=0.6, par(mar(0,0,9,0)))
spplot(worldmap, "POP2005", col.regions = my.palette, cuts = 4, col = "transparent",
aspect=0.6, par(mar=c(0,0,9,0)))
?par
spplot(worldmap, "POP2005", col.regions = my.palette, cuts = 4, col = "transparent",
aspect=0.6, par(mar=c(0,0,9,0)))
par(mar=c(0,0,9,0))
spplot(worldmap, "POP2005", col.regions = my.palette, cuts = 4, col = "transparent",
aspect=0.6)
par(mar=c(9,0,0,0))
spplot(worldmap, "POP2005", col.regions = my.palette, cuts = 4, col = "transparent",
aspect=0.6)
getwd()
setwd("H:/Spatial_Stats_Presentation/spatialstatspres/")
